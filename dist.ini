name       = MongoDB
author     = Florian Ragwitz <rafl@debian.org>
author     = Kristina Chodorow <kristina@mongodb.org>
author     = Mike Friedman <friedo@mongodb.com>
author     = David Golden <david.golden@mongodb.org>
license    = Apache_2_0
copyright_holder = MongoDB, Inc.

; true for non-indexed -TRIAL development releases, false for stable releases
; leave true until ready for a stable release, then set false, release and
; reset to true
is_trial = 1

; *** FileGatherer phase ***

; xt tests

; ensure all .pm files have a $VERSION set
[Test::Version]

; *** EncodingProvider phase ***
[Encoding]
encoding = bytes
filename = t/img.png

; *** FileMunger phase ***

; RewriteVersion is both a VersionProvider and FileMunger
; VersionProvider: set $VERSION from main module
; FileMunger: munge $VERSION to dist version in gathered files
[RewriteVersion]

[Prereqs / ConfigureRequires]
Config::Auto = 0.22
Path::Tiny = 0.052

[AutoPrereqs]
[GatherDir]
[MetaYAML]
[MetaJSON]
[Manifest]
[PruneCruft]
;[License]
[Readme]
[MakeMaker::Custom]
[GithubMeta]
[Repository]
[ConfirmRelease]

; replacer settings minimize any line-number changes in code
[PodWeaver]
:version = 4.005
replacer = replace_with_comment
post_code_replacer = replace_with_nothing

;[Test::LocalBrew]
;brews         = perl-5.10.1
;brews         = perl-5.12.1
;brews         = perl-5.14.2
;brews         = perl-5.16.0

[Bugtracker]
web           = https://jira.mongodb.org/browse/PERL

[Metadata]
no_index.directory = ext
no_index.directory = inc
no_index.directory = t

; *** BeforeRelease phase ***

; Check for dirty files or files not covered by version control;
; dist.ini and Changes are allowed to be dirty and will get
; committed later after release
[Git::Check]

; *** Releaser phase ***

[UploadToCPAN]
;[FakeRelease]

; *** AfterRelease phase ***

; commit source files as of "dzil release" with any
; allowable modifications (i.e. Changes and dist.ini)
[Git::Commit / Commit_Dirty_Files]

; tag repo as of "dzil release"
[Git::Tag]
tag_format    = %v
tag_message   = Version %v

; NextRelease is both a FileMunger and AfterRelease plugin.
; Before release, it will write version and timestamp to Changes.
; After release, it will write the {{$NEXT}} marker to Changes
; for the next release cycle.
;
; It must come in dist.ini *after* first Git::Commit and before
; the second one so that it acts at the right time after release
[NextRelease]

; increment $VERSION in source .pm files
[BumpVersionAfterRelease]

; commit source files after modification
[Git::Commit / Commit_Updated_Files]
allow_dirty_match = ^lib/
commit_msg = Commit Changes and bump $VERSION

[Git::Push]
push_to         = origin
