
=pod

=head1 NAME

MongoDB::Tutorial - Getting started with MongoDB

=head1 DESCRIPTION

The tutorial runs through the basic functionality of the MongoDB package.  This 
is a good starting point if you have never used MongoDB before.

The tutorial assumes that you are running a Mongo database server locally on the
default port.

=head1 TERMINOLOGY

Document-oriented database terms and their relational equivalents:

=over

=item Database

Database

=item Collection

Table

=item Document

Record or row

=item C<MongoDB::OID>

Autoincrementing primary key

=back

=head1 TUTORIAL

=head2 Connecting

First, we have to connect to the database server, which should be running
locally on the default port (27017).  

    my $conn = MongoDB::Connection->new;

Now we need a database to work with, we'll call it "tutorial".  You need not do
anything special to create the database, Mongo will create it on the fly.

    my $db = $conn->get_database("tutorial");

The last part of the preliminary setup is to choose a collection, roughly 
equivalent to a relational database's table.  We'll be using the "users" 
collection to start out.

    my $users = $db->get_collection("users");

Again, there is no need to create the collection in advance, it will be created
as needed.

=head2 Creating Documents

=head3 Inserting

To add document to the collection, we use the C<insert> function, passing it a
hash to save.

    $users->insert({"name" => "Joe", 
        "age" => 52, 
        "likes" => [qw/skiing math ponies/])});

Now there is a user in the collection.  

=head3 C<MongoDB::OID>s

When a document is inserted, it is given an _id field if one does not already
exist.  By default, this field is a C<MongoDB::OID>, 12 bytes that are 
guaranteed to be unique. The _id field of the inserted document is returned by
the C<insert> method.

    $id = $users->insert({"name" => "Bill"});

An efficient way to insert documents is to send many at a time to the database
by using C<batch_insert>, which returns an array of the _id fields of the 
documents inserted.

    @ids = $users->batch_insert(\@fifty_hashrefs);


=head2 Retrieving Documents

=head3 Queries

To retrive all documents in a collection, we can use the C<query> method.

    my $all_users = $users->query;

To return all users named Joe, pass the query a hash with the key/value pair you
wish to match:

    my $some_users = $users->query({"name" => "Joe"});

You can match array elements in your querys; for example, to find all users who
like math:

    my $geeks = $users->query({"likes" => "math"});

=head3 Ranges

As queries are hashes, they cannot express familiar relations like "x < 4".  To
query with a comparison filter, Mongo uses $-prefixed terms.  For example, 
"x < 4" could be expressed by:

    my $doc321 = $collection->query({'x' => { '$lt' => 4 }});

We can use multiple comparison operators to get a range:

    my $doc32 = $collection->query({'x' => { '$gte' => 2, '$lt' => 4 }});


=head3 Cursors

C<query> returns a C<MongoDB::Cursor>, which can be converted into an array of
hash references.  For example, to print the "name" field of the first result:

    my @arr = $geeks->all;
    print @arr[0]->{'name'}."\n";

Cursors can also be iterated over, which is often better, as the entire result
set doesn't have to be stored in memory.  The following prints all of the users'
names:

    while (my $doc = $all_users->next) {
        print $doc->{'name'}."\n";
    }


=head2 Updating Documents

=head3 C<$>-operators

To change a document after it has been saved to the database, you must pass
C<update> two arguments.  The first is a query argument, identical to the 
previous section, to identify the document you want to change.  The second is an
argument that describes the change that you wish to make.  

The change is described by $-prefixed descriptors.  For example, to increment a
field, we would write:

    $users->update({"_id" => $id}, {'$inc' => {'age' => 1}});

To add an element to an array, we can use C<$push>.  So, to add an element to
the C<"likes"> array, we write:

    $users->update({"_id" => $id}, {'$push' => {'likes' => 'reading'}});

To add a new field or change the type or value of an existing field, we use 
C<$set>.  For example, to change the _id field to a username, we would say:

    $users->update({"_id" => $id}, {'$set' => {'_id' => 'joe_schmoe'}});

=head3 Options

By default, C<update> operates on one matching document, and does nothing if no
document matches the query.  There are two options available to change this
behavior.

Suppose we want to add a "gift" field to everyone whose birthday it is today.
We can write:

    $today = DateTime->now;
    $tomorrow = DateTime->now->set('day' => $today->day+1);

    $users->update({"bday" => {'$gte' => $today, '$lte' => $tomorrow}, 
        {'$set' => {'gift' => $gift}},
        {'multiple' => 1});

Sometimes we may want update to create an element if it does not already exist.
This is called an 'upsert' (update+insert).  For example, creating and updating
a log document could both be done with an insert:

    $pageviews->update({"url" => "www.example.com"},
        {"url" => "www.example.com", '$inc' => {"views" => 1}},
        {'upsert' => 1});


=head2 Deleting Documents

To delete documents, we use the C<remove> method.

    $user->remove({"name" => "Joe"});

Calling C<remove> with no parameters removes all of the objects in a collection.
It does not delete the collection, though (in that the indexes will still
exist).  To remove a collection, call C<drop>:

    $user->drop;

C<drop> can also be used for whole databases:

    $db->drop;


